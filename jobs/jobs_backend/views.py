from django.shortcuts import render
from rest_framework import generics
from rest_framework.response import Response
from .models import Applicant, Employer, Posting, Application
from .serializers import ApplicantSerializer, EmployerSerializer, PostingSerializer, ApplicationSerializer

# Create your views here.

""" APPLICANTS """
class ApplicantList(generics.ListCreateAPIView):
    queryset = Applicant.objects.all()
    serializer_class = ApplicantSerializer

class ApplicantDetail(generics.RetrieveUpdateDestroyAPIView):
    queryset = Applicant.objects.all()
    serializer_class = ApplicantSerializer

""" EMPLOYERS """
class EmployerList(generics.ListCreateAPIView):
    queryset = Employer.objects.all()
    serializer_class = EmployerSerializer

class EmployerDetail(generics.RetrieveUpdateDestroyAPIView):
    queryset = Employer.objects.all()
    serializer_class = EmployerSerializer


""" POSTINGS """
class PostingList(generics.ListCreateAPIView):
    queryset = Posting.objects.all()
    serializer_class = PostingSerializer

class PostingDetail(generics.RetrieveUpdateDestroyAPIView):
    queryset = Posting.objects.all()
    serializer_class = PostingSerializer


""" APPLICATIONS """
class ApplicationList(generics.ListCreateAPIView):
    queryset = Application.objects.all()
    serializer_class = ApplicationSerializer

    def post(self, request):
        serializer = ApplicationSerializer(data=request.data)
        if serializer.is_valid():
            request_email = serializer.data['email']

            #Check if user is in database
            try: 
                applicant = Applicant.objects.get(email=request_email)
            #If not
            except Exception as e:
            #Create a user
                print(e)
                #Username is email
                #Email is email
                #Password is autogenerated and set to expire on first use
                #Set active to false

                        #Send user an email with the information about their account

                        #When user clicks the link 
                            #Force password reset when user clicks the link
                            #Log in user and set_active to true 

                        #Return response

                    #If user already is in database

                        #Return response

                
        queryset = self.get_queryset()
        serializer = ApplicationSerializer(queryset, many=True)
        return Response(serializer.data)

class ApplicationDetail(generics.RetrieveUpdateDestroyAPIView):
    queryset = Application.objects.all()
    serializer_class = ApplicationSerializer